[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Aditional Training",
    "section": "",
    "text": "We want to propose a series of course additions for the Pro-AI CDT students, done by the Pro-AI CDT staff, aiming at the enhancement of their programming expertise and software engineering practices. These new offerings will delve into advanced Python concepts, such as magic methods (dunder methods), list comprehensions, generator expressions, and tuple handling, which are crucial for efficient and expressive code writing. The curriculum will also cover higher-level programming topics like first-class functions, decorators, closures, vectorization, and promoting performance optimization. Additionally, students will gain exposure to best practices in software engineering, such as clean code principles, ensuring they are well-equipped to write maintainable, scalable, and high-quality AI-driven applications. There are four additional modules related to the python programming language."
  },
  {
    "objectID": "decorators_and_closures/mldp.html#what-are-decorators-and-closures",
    "href": "decorators_and_closures/mldp.html#what-are-decorators-and-closures",
    "title": "Decorators and Closures",
    "section": "What Are Decorators and Closures?",
    "text": "What Are Decorators and Closures?\n\nClosures allow a function to retain access to its enclosing scope.\nDecorators are functions that modify other functions dynamically.\nUsed for:\n\nCode reusability\nLogging, authentication, caching\nExtending function behavior"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#what-is-a-closure",
    "href": "decorators_and_closures/mldp.html#what-is-a-closure",
    "title": "Decorators and Closures",
    "section": "What is a Closure?",
    "text": "What is a Closure?\n\nA closure is a function that “remembers” the variables from its enclosing scope, even after the scope has finished executing.\n\n\n\nMessage: Hello!"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#why-use-closures",
    "href": "decorators_and_closures/mldp.html#why-use-closures",
    "title": "Decorators and Closures",
    "section": "Why Use Closures?",
    "text": "Why Use Closures?\n- Advantages\n\n    - Encapsulation: Keeps data hidden.\n    - Avoids global variables: Limits scope.\n    - Useful in decorators: Enables function modification.\n\n\n10"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#what-is-a-decorator",
    "href": "decorators_and_closures/mldp.html#what-is-a-decorator",
    "title": "Decorators and Closures",
    "section": "What is a Decorator?",
    "text": "What is a Decorator?\n- A decorator is a function that takes another function as input and modifies its behavior without changing its code.\n- Uses closures to wrap a function.\n\n\nBefore the function call\nHello!\nAfter the function call"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#how-decorators-work",
    "href": "decorators_and_closures/mldp.html#how-decorators-work",
    "title": "Decorators and Closures",
    "section": "How Decorators Work",
    "text": "How Decorators Work\n- The decorator function takes another function as an argument.\n- It creates a wrapper function that modifies the behavior.\n- It returns the wrapper function instead of the original.\n- The @decorator syntax automatically applies the decorator."
  },
  {
    "objectID": "decorators_and_closures/mldp.html#multiple-decorators",
    "href": "decorators_and_closures/mldp.html#multiple-decorators",
    "title": "Decorators and Closures",
    "section": "Multiple Decorators",
    "text": "Multiple Decorators\n\nStacking Decorators - Multiple decorators can be applied in sequence.\n\n\n\nHELLO!!!\n\n\n- Execution order: exclaim → uppercase → greet()"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#decorators-with-arguments",
    "href": "decorators_and_closures/mldp.html#decorators-with-arguments",
    "title": "Decorators and Closures",
    "section": "Decorators with Arguments",
    "text": "Decorators with Arguments\n\n\nHello!\nHello!\nHello!\n\n\n\nThis decorator runs the function n times"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#examples",
    "href": "decorators_and_closures/mldp.html#examples",
    "title": "Decorators and Closures",
    "section": "Examples",
    "text": "Examples\n\n\nslow_function took 2.0021 seconds"
  },
  {
    "objectID": "decorators_and_closures/mldp.html#standard-decorators",
    "href": "decorators_and_closures/mldp.html#standard-decorators",
    "title": "Decorators and Closures",
    "section": "Standard Decorators",
    "text": "Standard Decorators\n- @staticmethod:    Defines a static method inside a class.\n- @classmethod: Defines a method that operates on the class itself.\n- @property:    Converts a method into a read-only property."
  },
  {
    "objectID": "decorators_and_closures/mldp.html#when-to-use-decorators",
    "href": "decorators_and_closures/mldp.html#when-to-use-decorators",
    "title": "Decorators and Closures",
    "section": "When to Use Decorators?",
    "text": "When to Use Decorators?\n- Logging (debugging and performance tracking)\n- Access control (authentication, security)\n- Caching (memoization)\n- Code reuse (DRY principle)"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html",
    "href": "decorators_and_closures/decorators_and_closures.html",
    "title": "Decorators and Closures",
    "section": "",
    "text": "Closures allow a function to retain access to its enclosing scope.\nDecorators are functions that modify other functions dynamically.\nUsed for:\n\nCode reusability\nLogging, authentication, caching\nExtending function behavior"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#what-are-decorators-and-closures",
    "href": "decorators_and_closures/decorators_and_closures.html#what-are-decorators-and-closures",
    "title": "Decorators and Closures",
    "section": "",
    "text": "Closures allow a function to retain access to its enclosing scope.\nDecorators are functions that modify other functions dynamically.\nUsed for:\n\nCode reusability\nLogging, authentication, caching\nExtending function behavior"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#what-is-a-closure",
    "href": "decorators_and_closures/decorators_and_closures.html#what-is-a-closure",
    "title": "Decorators and Closures",
    "section": "What is a Closure?",
    "text": "What is a Closure?\n\nA closure is a function that “remembers” the variables from its enclosing scope, even after the scope has finished executing.\n\n\ndef outer_function(msg):\n    def inner_function():\n        print(f\"Message: {msg}\")\n    return inner_function\n\nclosure = outer_function(\"Hello!\")\nclosure()  # Output: Message: Hello!\n\nMessage: Hello!"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#why-use-closures",
    "href": "decorators_and_closures/decorators_and_closures.html#why-use-closures",
    "title": "Decorators and Closures",
    "section": "Why Use Closures?",
    "text": "Why Use Closures?\n- Advantages\n\n    - Encapsulation: Keeps data hidden.\n    - Avoids global variables: Limits scope.\n    - Useful in decorators: Enables function modification.\n\ndef multiplier(factor):\n    def multiply(n):\n        return n * factor\n    return multiply\n\ndouble = multiplier(2)\nprint(double(5))  # Output: 10\n\n10"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#what-is-a-decorator",
    "href": "decorators_and_closures/decorators_and_closures.html#what-is-a-decorator",
    "title": "Decorators and Closures",
    "section": "What is a Decorator?",
    "text": "What is a Decorator?\n- A decorator is a function that takes another function as input and modifies its behavior without changing its code.\n- Uses closures to wrap a function.\n\ndef decorator(func):\n    def wrapper():\n        print(\"Before the function call\")\n        func()\n        print(\"After the function call\")\n    return wrapper\n\n@decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n\nBefore the function call\nHello!\nAfter the function call"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#how-decorators-work",
    "href": "decorators_and_closures/decorators_and_closures.html#how-decorators-work",
    "title": "Decorators and Closures",
    "section": "How Decorators Work",
    "text": "How Decorators Work\n- The decorator function takes another function as an argument.\n- It creates a wrapper function that modifies the behavior.\n- It returns the wrapper function instead of the original.\n- The @decorator syntax automatically applies the decorator."
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#multiple-decorators",
    "href": "decorators_and_closures/decorators_and_closures.html#multiple-decorators",
    "title": "Decorators and Closures",
    "section": "Multiple Decorators",
    "text": "Multiple Decorators\n\nStacking Decorators - Multiple decorators can be applied in sequence.\n\n\ndef uppercase(func):\n    def wrapper():\n        return func().upper()\n    return wrapper\n\ndef exclaim(func):\n    def wrapper():\n        return func() + \"!!!\"\n    return wrapper\n\n@uppercase\n@exclaim\ndef greet():\n    return \"hello\"\n\nprint(greet())  # Output: HELLO!!!\n\nHELLO!!!\n\n\n- Execution order: exclaim → uppercase → greet()"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#decorators-with-arguments",
    "href": "decorators_and_closures/decorators_and_closures.html#decorators-with-arguments",
    "title": "Decorators and Closures",
    "section": "Decorators with Arguments",
    "text": "Decorators with Arguments\n\ndef repeat(n):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for _ in range(n):\n                func(*args, **kwargs)\n        return wrapper\n    return decorator\n\n@repeat(3)\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()  \n# Output:\n# Hello!\n# Hello!\n# Hello!\n\nHello!\nHello!\nHello!\n\n\n\nThis decorator runs the function n times"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#examples",
    "href": "decorators_and_closures/decorators_and_closures.html#examples",
    "title": "Decorators and Closures",
    "section": "Examples",
    "text": "Examples\n\nimport time\n\ndef log_time(func):\n    def wrapper(*args, **kwargs):\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        print(f\"{func.__name__} took {end - start:.4f} seconds\")\n        return result\n    return wrapper\n\n@log_time\ndef slow_function():\n    time.sleep(2)\n\nslow_function()  # Output: slow_function took 2.000X seconds\n\nslow_function took 2.0021 seconds"
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#standard-decorators",
    "href": "decorators_and_closures/decorators_and_closures.html#standard-decorators",
    "title": "Decorators and Closures",
    "section": "Standard Decorators",
    "text": "Standard Decorators\n- @staticmethod:    Defines a static method inside a class.\n- @classmethod: Defines a method that operates on the class itself.\n- @property:    Converts a method into a read-only property."
  },
  {
    "objectID": "decorators_and_closures/decorators_and_closures.html#when-to-use-decorators",
    "href": "decorators_and_closures/decorators_and_closures.html#when-to-use-decorators",
    "title": "Decorators and Closures",
    "section": "When to Use Decorators?",
    "text": "When to Use Decorators?\n- Logging (debugging and performance tracking)\n- Access control (authentication, security)\n- Caching (memoization)\n- Code reuse (DRY principle)"
  },
  {
    "objectID": "first_class_functions/mldp.html#first-class-functions-in-python",
    "href": "first_class_functions/mldp.html#first-class-functions-in-python",
    "title": "First Class Functions",
    "section": "First-Class Functions in Python",
    "text": "First-Class Functions in Python\n\nWhat Are First-Class Functions?\n\nIn Python, functions are first-class objects.\nThis means they can be:\n\nAssigned to variables\nPassed as arguments\nReturned from other functions\nStored in data structures"
  },
  {
    "objectID": "first_class_functions/mldp.html#first-class-functions-in-python-1",
    "href": "first_class_functions/mldp.html#first-class-functions-in-python-1",
    "title": "First Class Functions",
    "section": "First-Class Functions in Python",
    "text": "First-Class Functions in Python\n\nWhy does this matter?\n\nIt enables functional programming techniques.\nIt makes code more flexible and reusable."
  },
  {
    "objectID": "first_class_functions/mldp.html#functional-programming",
    "href": "first_class_functions/mldp.html#functional-programming",
    "title": "First Class Functions",
    "section": "Functional Programming",
    "text": "Functional Programming\n\nWhat is Functional Programming?\n\nFunctional Programming (FP) is a programming paradigm that:\nFocuses on immutability and pure functions\nUses higher-order functions and function composition\nAvoids side effects and mutating state\nGoal: Write clear, predictable, and reusable code!"
  },
  {
    "objectID": "first_class_functions/mldp.html#key-principles-of-functional-programing",
    "href": "first_class_functions/mldp.html#key-principles-of-functional-programing",
    "title": "First Class Functions",
    "section": "Key Principles of Functional Programing",
    "text": "Key Principles of Functional Programing\n\nCore Concepts\n\nPure Functions – Functions that always return the same output for the same input.\nImmutability – Data cannot be modified after it’s created.\nHigher-Order Functions – Functions that take other functions as arguments or return them.\nFunction Composition – Combining simple functions to build complex behavior.\nRecursion – Replacing loops with recursive calls."
  },
  {
    "objectID": "first_class_functions/mldp.html#functions-as-objects",
    "href": "first_class_functions/mldp.html#functions-as-objects",
    "title": "First Class Functions",
    "section": "Functions as Objects",
    "text": "Functions as Objects\n\nIn Python, functions are treated like any other object.\n\n\n\nHello, Alice!"
  },
  {
    "objectID": "first_class_functions/mldp.html#passing-functions-as-arguments",
    "href": "first_class_functions/mldp.html#passing-functions-as-arguments",
    "title": "First Class Functions",
    "section": "Passing Functions as Arguments",
    "text": "Passing Functions as Arguments\n\nA function can accept another function as a parameter.\n\n\n\n25\n\n\n\nThe apply_function function takes a function (func) and a value, then applies the function to the value."
  },
  {
    "objectID": "first_class_functions/mldp.html#returning-functions-from-functions",
    "href": "first_class_functions/mldp.html#returning-functions-from-functions",
    "title": "First Class Functions",
    "section": "Returning Functions from Functions",
    "text": "Returning Functions from Functions\n\nA function can return another function, creating closures.\n\n\n\n10\n\n\n\nThe multiplier function returns a function that remembers the factor."
  },
  {
    "objectID": "first_class_functions/mldp.html#storing-functions-in-data-structures",
    "href": "first_class_functions/mldp.html#storing-functions-in-data-structures",
    "title": "First Class Functions",
    "section": "Storing Functions in Data Structures",
    "text": "Storing Functions in Data Structures\n\nFunctions can be stored in lists, dictionaries, and other data structures.\n\n\n\n7\n\n\n\nThis allows dynamic selection of functions at runtime!"
  },
  {
    "objectID": "first_class_functions/mldp.html#practical-applications",
    "href": "first_class_functions/mldp.html#practical-applications",
    "title": "First Class Functions",
    "section": "Practical Applications",
    "text": "Practical Applications\n- Where are first-class functions useful?\n- Higher-order functions (e.g., map(), filter(), reduce())\n- Decorators (modifying function behavior)\n-Callbacks (event-driven programming)\n-Custom function pipelines"
  },
  {
    "objectID": "first_class_functions/mldp.html#using-first-class-functions-with-map-and-filter",
    "href": "first_class_functions/mldp.html#using-first-class-functions-with-map-and-filter",
    "title": "First Class Functions",
    "section": "Using First-Class Functions with map() and filter()",
    "text": "Using First-Class Functions with map() and filter()\n\n\n[1, 4, 9, 16, 25]\n[2, 4]"
  },
  {
    "objectID": "first_class_functions/mldp.html#decorators---a-powerful-case",
    "href": "first_class_functions/mldp.html#decorators---a-powerful-case",
    "title": "First Class Functions",
    "section": "Decorators - A Powerful Case",
    "text": "Decorators - A Powerful Case\n\nDecorators use first-class functions to modify behavior.\n\n\n\nBefore function call\nHello!\nAfter function call\n\n\n\nOutput\n\nBefore function call\nHello!\nAfter function call"
  },
  {
    "objectID": "first_class_functions/mldp.html#advantages-of-first-class-functions",
    "href": "first_class_functions/mldp.html#advantages-of-first-class-functions",
    "title": "First Class Functions",
    "section": "Advantages of First-Class Functions",
    "text": "Advantages of First-Class Functions\n- Why Use First-Class Functions?\n- Encourages modular code\n- Reduces redundancy\n- Enables functional programming\n- Great for decorators, callbacks, and functional pipelines\n\n- More flexibility → Better Code!"
  },
  {
    "objectID": "first_class_functions/mldp.html#summary",
    "href": "first_class_functions/mldp.html#summary",
    "title": "First Class Functions",
    "section": "Summary",
    "text": "Summary\n- Key Takeaways:\n\n    - First-class functions allow functions to be treated as objects.\n    - You can assign, pass, return, and store functions dynamically.\n    - This enables powerful functional programming patterns.\n    - Used in higher-order functions, decorators, and more"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html",
    "href": "first_class_functions/first_class_functions.html",
    "title": "First Class Functions",
    "section": "",
    "text": "What Are First-Class Functions?\n\nIn Python, functions are first-class objects.\nThis means they can be:\n\nAssigned to variables\nPassed as arguments\nReturned from other functions\nStored in data structures"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#first-class-functions-in-python",
    "href": "first_class_functions/first_class_functions.html#first-class-functions-in-python",
    "title": "First Class Functions",
    "section": "",
    "text": "What Are First-Class Functions?\n\nIn Python, functions are first-class objects.\nThis means they can be:\n\nAssigned to variables\nPassed as arguments\nReturned from other functions\nStored in data structures"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#first-class-functions-in-python-1",
    "href": "first_class_functions/first_class_functions.html#first-class-functions-in-python-1",
    "title": "First Class Functions",
    "section": "First-Class Functions in Python",
    "text": "First-Class Functions in Python\n\nWhy does this matter?\n\nIt enables functional programming techniques.\nIt makes code more flexible and reusable."
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#functional-programming",
    "href": "first_class_functions/first_class_functions.html#functional-programming",
    "title": "First Class Functions",
    "section": "Functional Programming",
    "text": "Functional Programming\n\nWhat is Functional Programming?\n\nFunctional Programming (FP) is a programming paradigm that:\nFocuses on immutability and pure functions\nUses higher-order functions and function composition\nAvoids side effects and mutating state\nGoal: Write clear, predictable, and reusable code!"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#key-principles-of-functional-programing",
    "href": "first_class_functions/first_class_functions.html#key-principles-of-functional-programing",
    "title": "First Class Functions",
    "section": "Key Principles of Functional Programing",
    "text": "Key Principles of Functional Programing\n\nCore Concepts\n\nPure Functions – Functions that always return the same output for the same input.\nImmutability – Data cannot be modified after it’s created.\nHigher-Order Functions – Functions that take other functions as arguments or return them.\nFunction Composition – Combining simple functions to build complex behavior.\nRecursion – Replacing loops with recursive calls."
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#functions-as-objects",
    "href": "first_class_functions/first_class_functions.html#functions-as-objects",
    "title": "First Class Functions",
    "section": "Functions as Objects",
    "text": "Functions as Objects\n\nIn Python, functions are treated like any other object.\n\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\n# Assign function to a variable\ngreeting = greet  \nprint(greeting(\"Alice\"))  # Output: Hello, Alice!\n\nHello, Alice!"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#passing-functions-as-arguments",
    "href": "first_class_functions/first_class_functions.html#passing-functions-as-arguments",
    "title": "First Class Functions",
    "section": "Passing Functions as Arguments",
    "text": "Passing Functions as Arguments\n\nA function can accept another function as a parameter.\n\n\ndef apply_function(func, value):\n    return func(value)\n\ndef square(n):\n    return n * n\n\nresult = apply_function(square, 5)\nprint(result)  # Output: 25\n\n25\n\n\n\nThe apply_function function takes a function (func) and a value, then applies the function to the value."
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#returning-functions-from-functions",
    "href": "first_class_functions/first_class_functions.html#returning-functions-from-functions",
    "title": "First Class Functions",
    "section": "Returning Functions from Functions",
    "text": "Returning Functions from Functions\n\nA function can return another function, creating closures.\n\n\ndef multiplier(factor):\n    def multiply(number):\n        return number * factor\n    return multiply\n\ndouble = multiplier(2)\nprint(double(5))  # Output: 10\n\n10\n\n\n\nThe multiplier function returns a function that remembers the factor."
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#storing-functions-in-data-structures",
    "href": "first_class_functions/first_class_functions.html#storing-functions-in-data-structures",
    "title": "First Class Functions",
    "section": "Storing Functions in Data Structures",
    "text": "Storing Functions in Data Structures\n\nFunctions can be stored in lists, dictionaries, and other data structures.\n\n\noperations = {\n    \"add\": lambda x, y: x + y,\n    \"multiply\": lambda x, y: x * y\n}\n\nprint(operations[\"add\"](3, 4))  # Output: 7\n\n7\n\n\n\nThis allows dynamic selection of functions at runtime!"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#practical-applications",
    "href": "first_class_functions/first_class_functions.html#practical-applications",
    "title": "First Class Functions",
    "section": "Practical Applications",
    "text": "Practical Applications\n- Where are first-class functions useful?\n- Higher-order functions (e.g., map(), filter(), reduce())\n- Decorators (modifying function behavior)\n-Callbacks (event-driven programming)\n-Custom function pipelines"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#using-first-class-functions-with-map-and-filter",
    "href": "first_class_functions/first_class_functions.html#using-first-class-functions-with-map-and-filter",
    "title": "First Class Functions",
    "section": "Using First-Class Functions with map() and filter()",
    "text": "Using First-Class Functions with map() and filter()\n\nnumbers = [1, 2, 3, 4, 5]\n\n# Using map() to square numbers\nsquared = list(map(lambda x: x ** 2, numbers))\nprint(squared)  # Output: [1, 4, 9, 16, 25]\n\n# Using filter() to get even numbers\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(evens)  # Output: [2, 4]\n\n[1, 4, 9, 16, 25]\n[2, 4]"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#decorators---a-powerful-case",
    "href": "first_class_functions/first_class_functions.html#decorators---a-powerful-case",
    "title": "First Class Functions",
    "section": "Decorators - A Powerful Case",
    "text": "Decorators - A Powerful Case\n\nDecorators use first-class functions to modify behavior.\n\n\ndef decorator(func):\n    def wrapper():\n        print(\"Before function call\")\n        func()\n        print(\"After function call\")\n    return wrapper\n\n@decorator\ndef say_hello():\n    print(\"Hello!\")\n\nsay_hello()\n\nBefore function call\nHello!\nAfter function call\n\n\n\nOutput\n\nBefore function call\nHello!\nAfter function call"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#advantages-of-first-class-functions",
    "href": "first_class_functions/first_class_functions.html#advantages-of-first-class-functions",
    "title": "First Class Functions",
    "section": "Advantages of First-Class Functions",
    "text": "Advantages of First-Class Functions\n- Why Use First-Class Functions?\n- Encourages modular code\n- Reduces redundancy\n- Enables functional programming\n- Great for decorators, callbacks, and functional pipelines\n\n- More flexibility → Better Code!"
  },
  {
    "objectID": "first_class_functions/first_class_functions.html#summary",
    "href": "first_class_functions/first_class_functions.html#summary",
    "title": "First Class Functions",
    "section": "Summary",
    "text": "Summary\n- Key Takeaways:\n\n    - First-class functions allow functions to be treated as objects.\n    - You can assign, pass, return, and store functions dynamically.\n    - This enables powerful functional programming patterns.\n    - Used in higher-order functions, decorators, and more"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#design-patterns",
    "href": "machine_learning_design_patterns/mldp.html#design-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Design Patterns",
    "text": "Design Patterns\n\nWhat Are Design Patterns?\n\nReusable solutions to common problems in software and system design\n\nWhy Design Patterns Matter in ML\n\nStreamline development, avoid reinventing the wheel\nEnable scalable, efficient, and maintainable ML systems\n\nTypes of ML Design Patterns\n\nPatterns for data management, model training, deployment, and serving"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#why-design-patterns-matter-in-machine-learning",
    "href": "machine_learning_design_patterns/mldp.html#why-design-patterns-matter-in-machine-learning",
    "title": "Machine Learning Design Patterns",
    "section": "Why Design Patterns Matter in Machine Learning",
    "text": "Why Design Patterns Matter in Machine Learning\n\nAddress ML-Specific Challenges\n\nHandle data transformations, training pipelines, and model deployment\n\nEnsure Scalability and Reliability\n\nPatterns help design robust ML systems for production\n\nFacilitate Collaboration\n\nStandard patterns provide a common language among ML teams"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#types-of-machine-learning-design-patterns",
    "href": "machine_learning_design_patterns/mldp.html#types-of-machine-learning-design-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Types of Machine Learning Design Patterns",
    "text": "Types of Machine Learning Design Patterns\n\nData Patterns: Handle data ingestion, cleaning, and processing\nModel Patterns: Focus on model architecture, training, and tuning\nServing Patterns: Support model deployment, monitoring, and scaling\nWorkflow Patterns: Manage end-to-end ML pipelines efficiently"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#data-ingestion-and-transformation-patterns",
    "href": "machine_learning_design_patterns/mldp.html#data-ingestion-and-transformation-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Data Ingestion and Transformation Patterns",
    "text": "Data Ingestion and Transformation Patterns\n\nPattern: Feature Store\n\nCentralize feature storage to standardize and reuse features across models\n\nPattern: Data Pipeline\n\nAutomate data cleaning, transformation, and preprocessing\n\nPattern: Data Versioning\n\nTrack data changes and ensure reproducibility in experiments"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#model-training-patterns",
    "href": "machine_learning_design_patterns/mldp.html#model-training-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Model Training Patterns",
    "text": "Model Training Patterns\n\nPattern: Transfer Learning\nUse pre-trained models to reduce training time and improve performance\nPattern: Hyperparameter Tuning\nAutomate hyperparameter selection for optimal model performance\nPattern: Cross-Validation\nUse multiple data splits to validate model robustness and reduce overfitting"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#model-serving-and-deployment-patterns",
    "href": "machine_learning_design_patterns/mldp.html#model-serving-and-deployment-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Model Serving and Deployment Patterns",
    "text": "Model Serving and Deployment Patterns\n\nPattern: Model Ensemble\n\nCombine multiple models to improve accuracy and robustness\n\nPattern: Batch vs. Real-Time Serving\n\nChoose serving patterns based on latency and processing needs\n\nPattern: Model Staging\n\nUse stages (e.g., staging, production) for controlled deployment"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#monitoring-and-retraining-patterns",
    "href": "machine_learning_design_patterns/mldp.html#monitoring-and-retraining-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Monitoring and Retraining Patterns",
    "text": "Monitoring and Retraining Patterns\n\nPattern: Continuous Monitoring\n\nTrack model performance over time and detect issues (e.g., data drift)\n\nPattern: Model Retraining Trigger\n\nSet conditions to automatically trigger retraining (e.g., data drift)\n\nPattern: A/B Testing\n\nCompare models in production to evaluate new versions effectively"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#workflow-and-pipeline-patterns",
    "href": "machine_learning_design_patterns/mldp.html#workflow-and-pipeline-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Workflow and Pipeline Patterns",
    "text": "Workflow and Pipeline Patterns\n\nPattern: Pipeline Orchestration\n\nUse tools (e.g., Airflow, Kubeflow) to manage complex ML workflows\n\nPattern: Metadata Tracking\n\nRecord experiment metadata for reproducibility and model lineage\n\nPattern: Experiment Tracking\n\nKeep a log of experiments, configurations, and results to improve collaboration and model refinement"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#ml-specific-design-challenges",
    "href": "machine_learning_design_patterns/mldp.html#ml-specific-design-challenges",
    "title": "Machine Learning Design Patterns",
    "section": "ML-Specific Design Challenges",
    "text": "ML-Specific Design Challenges\n\nData Drift and Concept Drift\n\nChanges in data that require model updates\n\nResource Optimization\n\nBalancing computation costs with model performance\n\nMaintaining Reproducibility\n\nEnsure the same results with consistent data and configurations"
  },
  {
    "objectID": "machine_learning_design_patterns/mldp.html#conclusion-benefits-of-ml-design-patterns",
    "href": "machine_learning_design_patterns/mldp.html#conclusion-benefits-of-ml-design-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Conclusion: Benefits of ML Design Patterns",
    "text": "Conclusion: Benefits of ML Design Patterns\n\nEfficient Development: Patterns streamline and simplify ML project design\nScalable and Maintainable Systems: Ready for production and growth\nStandardization Across Teams: Improve team collaboration and code quality"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html",
    "href": "machine_learning_design_patterns/ml_design_patterns.html",
    "title": "Machine Learning Design Patterns",
    "section": "",
    "text": "What Are Design Patterns?\n\nReusable solutions to common problems in software and system design\n\nWhy Design Patterns Matter in ML\n\nStreamline development, avoid reinventing the wheel\nEnable scalable, efficient, and maintainable ML systems\n\nTypes of ML Design Patterns\n\nPatterns for data management, model training, deployment, and serving"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#design-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#design-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "",
    "text": "What Are Design Patterns?\n\nReusable solutions to common problems in software and system design\n\nWhy Design Patterns Matter in ML\n\nStreamline development, avoid reinventing the wheel\nEnable scalable, efficient, and maintainable ML systems\n\nTypes of ML Design Patterns\n\nPatterns for data management, model training, deployment, and serving"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#why-design-patterns-matter-in-machine-learning",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#why-design-patterns-matter-in-machine-learning",
    "title": "Machine Learning Design Patterns",
    "section": "Why Design Patterns Matter in Machine Learning",
    "text": "Why Design Patterns Matter in Machine Learning\n\nAddress ML-Specific Challenges\n\nHandle data transformations, training pipelines, and model deployment\n\nEnsure Scalability and Reliability\n\nPatterns help design robust ML systems for production\n\nFacilitate Collaboration\n\nStandard patterns provide a common language among ML teams"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#types-of-machine-learning-design-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#types-of-machine-learning-design-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Types of Machine Learning Design Patterns",
    "text": "Types of Machine Learning Design Patterns\n\nData Patterns: Handle data ingestion, cleaning, and processing\nModel Patterns: Focus on model architecture, training, and tuning\nServing Patterns: Support model deployment, monitoring, and scaling\nWorkflow Patterns: Manage end-to-end ML pipelines efficiently"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#data-ingestion-and-transformation-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#data-ingestion-and-transformation-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Data Ingestion and Transformation Patterns",
    "text": "Data Ingestion and Transformation Patterns\n\nPattern: Feature Store\n\nCentralize feature storage to standardize and reuse features across models\n\nPattern: Data Pipeline\n\nAutomate data cleaning, transformation, and preprocessing\n\nPattern: Data Versioning\n\nTrack data changes and ensure reproducibility in experiments"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#model-training-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#model-training-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Model Training Patterns",
    "text": "Model Training Patterns\n\nPattern: Transfer Learning\nUse pre-trained models to reduce training time and improve performance\nPattern: Hyperparameter Tuning\nAutomate hyperparameter selection for optimal model performance\nPattern: Cross-Validation\nUse multiple data splits to validate model robustness and reduce overfitting"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#model-serving-and-deployment-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#model-serving-and-deployment-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Model Serving and Deployment Patterns",
    "text": "Model Serving and Deployment Patterns\n\nPattern: Model Ensemble\n\nCombine multiple models to improve accuracy and robustness\n\nPattern: Batch vs. Real-Time Serving\n\nChoose serving patterns based on latency and processing needs\n\nPattern: Model Staging\n\nUse stages (e.g., staging, production) for controlled deployment"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#monitoring-and-retraining-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#monitoring-and-retraining-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Monitoring and Retraining Patterns",
    "text": "Monitoring and Retraining Patterns\n\nPattern: Continuous Monitoring\n\nTrack model performance over time and detect issues (e.g., data drift)\n\nPattern: Model Retraining Trigger\n\nSet conditions to automatically trigger retraining (e.g., data drift)\n\nPattern: A/B Testing\n\nCompare models in production to evaluate new versions effectively"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#workflow-and-pipeline-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#workflow-and-pipeline-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Workflow and Pipeline Patterns",
    "text": "Workflow and Pipeline Patterns\n\nPattern: Pipeline Orchestration\n\nUse tools (e.g., Airflow, Kubeflow) to manage complex ML workflows\n\nPattern: Metadata Tracking\n\nRecord experiment metadata for reproducibility and model lineage\n\nPattern: Experiment Tracking\n\nKeep a log of experiments, configurations, and results to improve collaboration and model refinement"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#ml-specific-design-challenges",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#ml-specific-design-challenges",
    "title": "Machine Learning Design Patterns",
    "section": "ML-Specific Design Challenges",
    "text": "ML-Specific Design Challenges\n\nData Drift and Concept Drift\n\nChanges in data that require model updates\n\nResource Optimization\n\nBalancing computation costs with model performance\n\nMaintaining Reproducibility\n\nEnsure the same results with consistent data and configurations"
  },
  {
    "objectID": "machine_learning_design_patterns/ml_design_patterns.html#conclusion-benefits-of-ml-design-patterns",
    "href": "machine_learning_design_patterns/ml_design_patterns.html#conclusion-benefits-of-ml-design-patterns",
    "title": "Machine Learning Design Patterns",
    "section": "Conclusion: Benefits of ML Design Patterns",
    "text": "Conclusion: Benefits of ML Design Patterns\n\nEfficient Development: Patterns streamline and simplify ML project design\nScalable and Maintainable Systems: Ready for production and growth\nStandardization Across Teams: Improve team collaboration and code quality"
  },
  {
    "objectID": "magic_methods/pmm.html#introduction",
    "href": "magic_methods/pmm.html#introduction",
    "title": "Python Magic Methods",
    "section": "Introduction",
    "text": "Introduction\n\nDefinition: Magic methods, or dunder methods, are special methods surrounded by double underscores (__).\nPurpose:\nEnable Python’s syntactic sugar (e.g., +, [], len()). Customize class behavior for readability and flexibility.\nExamples: init, str, add."
  },
  {
    "objectID": "magic_methods/pmm.html#why-use-magic-methods",
    "href": "magic_methods/pmm.html#why-use-magic-methods",
    "title": "Python Magic Methods",
    "section": "Why Use Magic Methods?",
    "text": "Why Use Magic Methods?\n\nMake classes intuitive and Pythonic.\nEnable operator overloading.\nCustomize built-in function behavior.\nSimplify code while enhancing readability."
  },
  {
    "objectID": "magic_methods/pmm.html#common-magic-methods",
    "href": "magic_methods/pmm.html#common-magic-methods",
    "title": "Python Magic Methods",
    "section": "Common Magic Methods",
    "text": "Common Magic Methods\n\nInitialization and Representation\n\ninit: Initialize objects.\nrepr: Official string representation for debugging.\nstr: User-friendly string representation.\n\nComparison\n\neq: Equality comparison (==)."
  },
  {
    "objectID": "magic_methods/pmm.html#common-magic-methods-1",
    "href": "magic_methods/pmm.html#common-magic-methods-1",
    "title": "Python Magic Methods",
    "section": "Common Magic Methods",
    "text": "Common Magic Methods\n\nComparison\n\nlt: Less-than comparison (&lt;).\n\nArithmetic Operators\n\nadd: Overload addition (+).\nmul: Overload multiplication (*)."
  },
  {
    "objectID": "magic_methods/pmm.html#example-custom-string-representation",
    "href": "magic_methods/pmm.html#example-custom-string-representation",
    "title": "Python Magic Methods",
    "section": "Example: Custom String Representation",
    "text": "Example: Custom String Representation\n\nCode example\n\n\n\n'1984' by George Orwell"
  },
  {
    "objectID": "magic_methods/pmm.html#advanced-magic-methods",
    "href": "magic_methods/pmm.html#advanced-magic-methods",
    "title": "Python Magic Methods",
    "section": "Advanced Magic Methods",
    "text": "Advanced Magic Methods\n\nItem Access and Length\n\ngetitem: Access elements using indexing ([]).\nlen: Define behavior of len().\n\nCallable Objects\n\ncall: Make objects callable.\n\nContext Management\n\nenter / exit: Support with statements."
  },
  {
    "objectID": "magic_methods/pmm.html#advanced-magic-methods-1",
    "href": "magic_methods/pmm.html#advanced-magic-methods-1",
    "title": "Python Magic Methods",
    "section": "Advanced Magic Methods",
    "text": "Advanced Magic Methods\n\nCode example\n\n\n\n1\n2"
  },
  {
    "objectID": "magic_methods/pmm.html#operator-overloading",
    "href": "magic_methods/pmm.html#operator-overloading",
    "title": "Python Magic Methods",
    "section": "Operator Overloading",
    "text": "Operator Overloading\n\nRedefine operators for custom objects.\nCode Example: Adding two objects.\n\n\n\nVector(6, 8)"
  },
  {
    "objectID": "magic_methods/pmm.html#magic-methods-for-context-management",
    "href": "magic_methods/pmm.html#magic-methods-for-context-management",
    "title": "Python Magic Methods",
    "section": "Magic Methods for Context Management",
    "text": "Magic Methods for Context Management\n\nEnable safe resource handling.\nUse enter and exit for with statements.\nCode example"
  },
  {
    "objectID": "magic_methods/pmm.html#best-practices",
    "href": "magic_methods/pmm.html#best-practices",
    "title": "Python Magic Methods",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse magic methods only when intuitive and necessary.\nAvoid overloading operators where behavior is unclear.\nAlways provide meaningful repr for debugging.\nDocument custom behaviors thoroughly."
  },
  {
    "objectID": "magic_methods/pmm.html#conclusion",
    "href": "magic_methods/pmm.html#conclusion",
    "title": "Python Magic Methods",
    "section": "Conclusion",
    "text": "Conclusion\n\nRecap\n\nMagic methods simplify and enhance Python code.\nCommon use cases include initialization, representation, and operator overloading.\nUse them judiciously to maintain code clarity.\n\nCall to Action:\n\nExplore Python’s official documentation on magic methods.\nStart integrating them into your projects for more Pythonic solutions."
  },
  {
    "objectID": "magic_methods/magic_methods.html",
    "href": "magic_methods/magic_methods.html",
    "title": "Python Magic Methods",
    "section": "",
    "text": "Definition: Magic methods, or dunder methods, are special methods surrounded by double underscores (__).\nPurpose:\nEnable Python’s syntactic sugar (e.g., +, [], len()). Customize class behavior for readability and flexibility.\nExamples: init, str, add."
  },
  {
    "objectID": "magic_methods/magic_methods.html#introduction",
    "href": "magic_methods/magic_methods.html#introduction",
    "title": "Python Magic Methods",
    "section": "",
    "text": "Definition: Magic methods, or dunder methods, are special methods surrounded by double underscores (__).\nPurpose:\nEnable Python’s syntactic sugar (e.g., +, [], len()). Customize class behavior for readability and flexibility.\nExamples: init, str, add."
  },
  {
    "objectID": "magic_methods/magic_methods.html#why-use-magic-methods",
    "href": "magic_methods/magic_methods.html#why-use-magic-methods",
    "title": "Python Magic Methods",
    "section": "Why Use Magic Methods?",
    "text": "Why Use Magic Methods?\n\nMake classes intuitive and Pythonic.\nEnable operator overloading.\nCustomize built-in function behavior.\nSimplify code while enhancing readability."
  },
  {
    "objectID": "magic_methods/magic_methods.html#common-magic-methods",
    "href": "magic_methods/magic_methods.html#common-magic-methods",
    "title": "Python Magic Methods",
    "section": "Common Magic Methods",
    "text": "Common Magic Methods\n\nInitialization and Representation\n\ninit: Initialize objects.\nrepr: Official string representation for debugging.\nstr: User-friendly string representation.\n\nComparison\n\neq: Equality comparison (==)."
  },
  {
    "objectID": "magic_methods/magic_methods.html#common-magic-methods-1",
    "href": "magic_methods/magic_methods.html#common-magic-methods-1",
    "title": "Python Magic Methods",
    "section": "Common Magic Methods",
    "text": "Common Magic Methods\n\nComparison\n\nlt: Less-than comparison (&lt;).\n\nArithmetic Operators\n\nadd: Overload addition (+).\nmul: Overload multiplication (*)."
  },
  {
    "objectID": "magic_methods/magic_methods.html#example-custom-string-representation",
    "href": "magic_methods/magic_methods.html#example-custom-string-representation",
    "title": "Python Magic Methods",
    "section": "Example: Custom String Representation",
    "text": "Example: Custom String Representation\n\nCode example\n\n\nclass Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n    \n    def __str__(self):\n        return f\"'{self.title}' by {self.author}\"\n    \n    def __repr__(self):\n        return f\"Book(title='{self.title}', author='{self.author}')\"\n\nbook = Book(\"1984\", \"George Orwell\")\nprint(book)  # Output: '1984' by George Orwell\n\n'1984' by George Orwell"
  },
  {
    "objectID": "magic_methods/magic_methods.html#advanced-magic-methods",
    "href": "magic_methods/magic_methods.html#advanced-magic-methods",
    "title": "Python Magic Methods",
    "section": "Advanced Magic Methods",
    "text": "Advanced Magic Methods\n\nItem Access and Length\n\ngetitem: Access elements using indexing ([]).\nlen: Define behavior of len().\n\nCallable Objects\n\ncall: Make objects callable.\n\nContext Management\n\nenter / exit: Support with statements."
  },
  {
    "objectID": "magic_methods/magic_methods.html#advanced-magic-methods-1",
    "href": "magic_methods/magic_methods.html#advanced-magic-methods-1",
    "title": "Python Magic Methods",
    "section": "Advanced Magic Methods",
    "text": "Advanced Magic Methods\n\nCode example\n\n\nclass Counter:\n    def __init__(self):\n        self.count = 0\n    \n    def __call__(self):\n        self.count += 1\n        return self.count\n\ncounter = Counter()\nprint(counter())  # Output: 1\nprint(counter())  # Output: 2\n\n1\n2"
  },
  {
    "objectID": "magic_methods/magic_methods.html#operator-overloading",
    "href": "magic_methods/magic_methods.html#operator-overloading",
    "title": "Python Magic Methods",
    "section": "Operator Overloading",
    "text": "Operator Overloading\n\nRedefine operators for custom objects.\nCode Example: Adding two objects.\n\n\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __add__(self, other):\n        return Vector(self.x + other.x, self.y + other.y)\n    \n    def __str__(self):\n        return f\"Vector({self.x}, {self.y})\"\n\nv1 = Vector(2, 3)\nv2 = Vector(4, 5)\nprint(v1 + v2)  # Output: Vector(6, 8)\n\nVector(6, 8)"
  },
  {
    "objectID": "magic_methods/magic_methods.html#magic-methods-for-context-management",
    "href": "magic_methods/magic_methods.html#magic-methods-for-context-management",
    "title": "Python Magic Methods",
    "section": "Magic Methods for Context Management",
    "text": "Magic Methods for Context Management\n\nEnable safe resource handling.\nUse enter and exit for with statements.\nCode example\n\n\nclass FileManager:\n    def __init__(self, filename, mode):\n        self.file = open(filename, mode)\n    \n    def __enter__(self):\n        return self.file\n    \n    def __exit__(self, exc_type, exc_value, traceback):\n        self.file.close()\n\nwith FileManager(\"test.txt\", \"w\") as f:\n    f.write(\"Hello, World!\")"
  },
  {
    "objectID": "magic_methods/magic_methods.html#best-practices",
    "href": "magic_methods/magic_methods.html#best-practices",
    "title": "Python Magic Methods",
    "section": "Best Practices",
    "text": "Best Practices\n\nUse magic methods only when intuitive and necessary.\nAvoid overloading operators where behavior is unclear.\nAlways provide meaningful repr for debugging.\nDocument custom behaviors thoroughly."
  },
  {
    "objectID": "magic_methods/magic_methods.html#conclusion",
    "href": "magic_methods/magic_methods.html#conclusion",
    "title": "Python Magic Methods",
    "section": "Conclusion",
    "text": "Conclusion\n\nRecap\n\nMagic methods simplify and enhance Python code.\nCommon use cases include initialization, representation, and operator overloading.\nUse them judiciously to maintain code clarity.\n\nCall to Action:\n\nExplore Python’s official documentation on magic methods.\nStart integrating them into your projects for more Pythonic solutions."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "clean_code/cc.html#introduction",
    "href": "clean_code/cc.html#introduction",
    "title": "Clean Code",
    "section": "Introduction",
    "text": "Introduction\n\nWhat is Clean Code?\n\nCode that is easy to understand, modify, and maintain\nPrioritizes readability, simplicity, and consistency\n\nWhy Clean Code Matters\n\nReduces bugs and errors\nImproves team collaboration and onboarding\nEnsures scalability and longevity of projects"
  },
  {
    "objectID": "clean_code/cc.html#key-principles-of-clean-code",
    "href": "clean_code/cc.html#key-principles-of-clean-code",
    "title": "Clean Code",
    "section": "Key Principles of Clean Code",
    "text": "Key Principles of Clean Code\n\nReadability: Code should be self-explanatory and easy to follow\nSimplicity: Avoid unnecessary complexity\nConsistency: Standardize formatting and naming conventions\nSingle Responsibility: Each function/class should have one purpose\nDRY Principle: Don’t Repeat Yourself – avoid duplicate code"
  },
  {
    "objectID": "clean_code/cc.html#naming-conventions",
    "href": "clean_code/cc.html#naming-conventions",
    "title": "Clean Code",
    "section": "Naming Conventions",
    "text": "Naming Conventions\n\nUse Meaningful Names\n\nDescriptive names for variables, functions, and classes\n\nAvoid Abbreviations\n\nShortcuts can confuse readers; use full words\n\nBe Consistent\n\nStick with established naming conventions across the codebase"
  },
  {
    "objectID": "clean_code/cc.html#writing-clean-functions",
    "href": "clean_code/cc.html#writing-clean-functions",
    "title": "Clean Code",
    "section": "Writing Clean Functions",
    "text": "Writing Clean Functions\n\nKeep Functions Short and Focused\n\nAim for functions with one purpose\n\nLimit the Number of Parameters\n\nAvoid functions with too many arguments; use objects if needed\n\nUse Clear Return Values\n\nEnsure functions return predictable, useful values"
  },
  {
    "objectID": "clean_code/cc.html#effective-code-structuring",
    "href": "clean_code/cc.html#effective-code-structuring",
    "title": "Clean Code",
    "section": "Effective Code Structuring",
    "text": "Effective Code Structuring\n\nOrganize Code Logically\nGroup related functions and classes\nMinimize Dependencies\nReduce interdependence of modules\nUse Comments Wisely\nComment on “why,” not “what” the code does"
  },
  {
    "objectID": "clean_code/cc.html#error-handling-and-exceptions",
    "href": "clean_code/cc.html#error-handling-and-exceptions",
    "title": "Clean Code",
    "section": "Error Handling and Exceptions",
    "text": "Error Handling and Exceptions\n\nHandle Errors Gracefully\n\nAvoid crashing; provide fallback options where possible\n\nUse Exceptions Intelligently\n\nDon’t overuse; handle expected errors explicitly\n\nProvide Clear Error Messages\n\nEnsure errors are understandable and actionable"
  },
  {
    "objectID": "clean_code/cc.html#code-reviews-and-refactoring",
    "href": "clean_code/cc.html#code-reviews-and-refactoring",
    "title": "Clean Code",
    "section": "Code Reviews and Refactoring",
    "text": "Code Reviews and Refactoring\n\nImportance of Regular Code Reviews\nIdentify potential issues early Learn and share knowledge among team members\nRefactor Often\nImprove structure without altering functionality Keep the codebase clean and manageable"
  },
  {
    "objectID": "clean_code/cc.html#testing-for-clean-code",
    "href": "clean_code/cc.html#testing-for-clean-code",
    "title": "Clean Code",
    "section": "Testing for Clean Code",
    "text": "Testing for Clean Code\n\nWrite Unit Tests for Functions\n\nEnsure functions behave as expected\n\nTest Edge Cases\n\nCover unusual inputs and edge conditions\n\nUse Tests as Documentation\n\nTests reveal how code should be used and what to expect"
  },
  {
    "objectID": "clean_code/cc.html#tools-and-best-practices-for-clean-code",
    "href": "clean_code/cc.html#tools-and-best-practices-for-clean-code",
    "title": "Clean Code",
    "section": "Tools and Best Practices for Clean Code",
    "text": "Tools and Best Practices for Clean Code\n\nLinters and Formatters\n\nAutomatically enforce coding standards\n\nVersion Control and Branching\n\nTrack changes and manage multiple code versions\n\nDocumentation\n\nComment code, use README files, and create wikis for project structure"
  },
  {
    "objectID": "clean_code/cc.html#benefits-of-clean-code",
    "href": "clean_code/cc.html#benefits-of-clean-code",
    "title": "Clean Code",
    "section": "Benefits of Clean Code",
    "text": "Benefits of Clean Code\n\nHigher Productivity: Cleaner code saves time in debugging and development\nImproved Quality: Reduces the likelihood of bugs and inconsistencies\nBetter Collaboration: Easier for teams to work on and scale projects\nFuture-Proofing: Clean code ensures adaptability and ease of modification"
  },
  {
    "objectID": "clean_code/clean_code.html",
    "href": "clean_code/clean_code.html",
    "title": "Clean Code",
    "section": "",
    "text": "What is Clean Code?\n\nCode that is easy to understand, modify, and maintain\nPrioritizes readability, simplicity, and consistency\n\nWhy Clean Code Matters\n\nReduces bugs and errors\nImproves team collaboration and onboarding\nEnsures scalability and longevity of projects"
  },
  {
    "objectID": "clean_code/clean_code.html#introduction",
    "href": "clean_code/clean_code.html#introduction",
    "title": "Clean Code",
    "section": "",
    "text": "What is Clean Code?\n\nCode that is easy to understand, modify, and maintain\nPrioritizes readability, simplicity, and consistency\n\nWhy Clean Code Matters\n\nReduces bugs and errors\nImproves team collaboration and onboarding\nEnsures scalability and longevity of projects"
  },
  {
    "objectID": "clean_code/clean_code.html#key-principles-of-clean-code",
    "href": "clean_code/clean_code.html#key-principles-of-clean-code",
    "title": "Clean Code",
    "section": "Key Principles of Clean Code",
    "text": "Key Principles of Clean Code\n\nReadability: Code should be self-explanatory and easy to follow\nSimplicity: Avoid unnecessary complexity\nConsistency: Standardize formatting and naming conventions\nSingle Responsibility: Each function/class should have one purpose\nDRY Principle: Don’t Repeat Yourself – avoid duplicate code"
  },
  {
    "objectID": "clean_code/clean_code.html#naming-conventions",
    "href": "clean_code/clean_code.html#naming-conventions",
    "title": "Clean Code",
    "section": "Naming Conventions",
    "text": "Naming Conventions\n\nUse Meaningful Names\n\nDescriptive names for variables, functions, and classes\n\nAvoid Abbreviations\n\nShortcuts can confuse readers; use full words\n\nBe Consistent\n\nStick with established naming conventions across the codebase"
  },
  {
    "objectID": "clean_code/clean_code.html#writing-clean-functions",
    "href": "clean_code/clean_code.html#writing-clean-functions",
    "title": "Clean Code",
    "section": "Writing Clean Functions",
    "text": "Writing Clean Functions\n\nKeep Functions Short and Focused\n\nAim for functions with one purpose\n\nLimit the Number of Parameters\n\nAvoid functions with too many arguments; use objects if needed\n\nUse Clear Return Values\n\nEnsure functions return predictable, useful values"
  },
  {
    "objectID": "clean_code/clean_code.html#effective-code-structuring",
    "href": "clean_code/clean_code.html#effective-code-structuring",
    "title": "Clean Code",
    "section": "Effective Code Structuring",
    "text": "Effective Code Structuring\n\nOrganize Code Logically\nGroup related functions and classes\nMinimize Dependencies\nReduce interdependence of modules\nUse Comments Wisely\nComment on “why,” not “what” the code does"
  },
  {
    "objectID": "clean_code/clean_code.html#error-handling-and-exceptions",
    "href": "clean_code/clean_code.html#error-handling-and-exceptions",
    "title": "Clean Code",
    "section": "Error Handling and Exceptions",
    "text": "Error Handling and Exceptions\n\nHandle Errors Gracefully\n\nAvoid crashing; provide fallback options where possible\n\nUse Exceptions Intelligently\n\nDon’t overuse; handle expected errors explicitly\n\nProvide Clear Error Messages\n\nEnsure errors are understandable and actionable"
  },
  {
    "objectID": "clean_code/clean_code.html#code-reviews-and-refactoring",
    "href": "clean_code/clean_code.html#code-reviews-and-refactoring",
    "title": "Clean Code",
    "section": "Code Reviews and Refactoring",
    "text": "Code Reviews and Refactoring\n\nImportance of Regular Code Reviews\nIdentify potential issues early Learn and share knowledge among team members\nRefactor Often\nImprove structure without altering functionality Keep the codebase clean and manageable"
  },
  {
    "objectID": "clean_code/clean_code.html#testing-for-clean-code",
    "href": "clean_code/clean_code.html#testing-for-clean-code",
    "title": "Clean Code",
    "section": "Testing for Clean Code",
    "text": "Testing for Clean Code\n\nWrite Unit Tests for Functions\n\nEnsure functions behave as expected\n\nTest Edge Cases\n\nCover unusual inputs and edge conditions\n\nUse Tests as Documentation\n\nTests reveal how code should be used and what to expect"
  },
  {
    "objectID": "clean_code/clean_code.html#tools-and-best-practices-for-clean-code",
    "href": "clean_code/clean_code.html#tools-and-best-practices-for-clean-code",
    "title": "Clean Code",
    "section": "Tools and Best Practices for Clean Code",
    "text": "Tools and Best Practices for Clean Code\n\nLinters and Formatters\n\nAutomatically enforce coding standards\n\nVersion Control and Branching\n\nTrack changes and manage multiple code versions\n\nDocumentation\n\nComment code, use README files, and create wikis for project structure"
  },
  {
    "objectID": "clean_code/clean_code.html#benefits-of-clean-code",
    "href": "clean_code/clean_code.html#benefits-of-clean-code",
    "title": "Clean Code",
    "section": "Benefits of Clean Code",
    "text": "Benefits of Clean Code\n\nHigher Productivity: Cleaner code saves time in debugging and development\nImproved Quality: Reduces the likelihood of bugs and inconsistencies\nBetter Collaboration: Easier for teams to work on and scale projects\nFuture-Proofing: Clean code ensures adaptability and ease of modification"
  },
  {
    "objectID": "CI_CD/cicd.html#cicd",
    "href": "CI_CD/cicd.html#cicd",
    "title": "CI/CD",
    "section": "CI/CD",
    "text": "CI/CD\n\nCI/CD stands for Continuous Integration (CI) and Continuous Delivery/Deployment (CD).\nIt is a key set of practices in modern software development.\nAutomates and streamlines the software delivery process."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd-1",
    "href": "CI_CD/cicd.html#cicd-1",
    "title": "CI/CD",
    "section": "CI/CD",
    "text": "CI/CD\n\nFocuses on improving software quality and efficiency.\nEnables teams to build, test, and release code frequently.\nReduces manual work and the potential for errors."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---continuous-integration-ci",
    "href": "CI_CD/cicd.html#cicd---continuous-integration-ci",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Integration (CI)",
    "text": "CI/CD - Continuous Integration (CI)\n\nFrequent code integration: Developers frequently merge code changes into a shared repository.\nAutomated testing: Every code commit triggers automated tests to detect bugs early.\nEarly bug detection: Small, incremental changes help identify and resolve issues faster."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---continuous-integration-ci-1",
    "href": "CI_CD/cicd.html#cicd---continuous-integration-ci-1",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Integration (CI)",
    "text": "CI/CD - Continuous Integration (CI)\n\nConsistent build environment: Ensures consistency between development, testing, and production environments.\nImproved code quality: Continuous feedback from tests leads to better code quality over time.\nFaster iteration cycles: Developers receive quick feedback, allowing faster iterations."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---continuous-delivery-cd",
    "href": "CI_CD/cicd.html#cicd---continuous-delivery-cd",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Delivery (CD)",
    "text": "CI/CD - Continuous Delivery (CD)\n\nAutomated release processes: After CI, code is automatically tested, validated, and prepared for deployment.\nFrequent, reliable releases: Ensures code can be released to production anytime with confidence.\nManual approval option: Allows for a final manual verification step before releasing to production."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---continuous-delivery-cd-1",
    "href": "CI_CD/cicd.html#cicd---continuous-delivery-cd-1",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Delivery (CD)",
    "text": "CI/CD - Continuous Delivery (CD)\n\nReduced release risk: Smaller, incremental updates lower the chances of major issues in production.\nQuick user feedback: Regular releases make it easier to gather user feedback and adjust features.\nFully automated deployments: Every change that passes automated tests is automatically deployed to production."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---continuous-delivery-cd-2",
    "href": "CI_CD/cicd.html#cicd---continuous-delivery-cd-2",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Delivery (CD)",
    "text": "CI/CD - Continuous Delivery (CD)\n\nNo manual intervention: Removes manual approval steps, ensuring fast, frequent deployments.\nRapid iteration: New features, bug fixes, and updates are delivered to end users continuously.\nRequires strong testing: Robust automated tests are critical to ensure no bugs reach production.\nHigh-quality monitoring: Real-time monitoring systems are essential to detect and respond to any production issues."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---benefits",
    "href": "CI_CD/cicd.html#cicd---benefits",
    "title": "CI/CD",
    "section": "CI/CD - Benefits",
    "text": "CI/CD - Benefits\n\nFaster development cycles: Continuous integration and deployment reduce the time between coding and deployment.\nHigher quality software: Continuous testing, feedback loops, and automated checks ensure higher reliability.\nReduced manual effort: Automation reduces manual testing, builds, and deployments, improving productivity."
  },
  {
    "objectID": "CI_CD/cicd.html#cicd---benefits-1",
    "href": "CI_CD/cicd.html#cicd---benefits-1",
    "title": "CI/CD",
    "section": "CI/CD - Benefits",
    "text": "CI/CD - Benefits\n\nGreater collaboration: Developers, testers, and operations teams work in sync, fostering a DevOps culture.\nBetter user experience: Faster delivery of features and fixes leads to improved customer satisfaction."
  },
  {
    "objectID": "CI_CD/cicd.html#github-actions",
    "href": "CI_CD/cicd.html#github-actions",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nCI/CD automation platform: GitHub Actions allows developers to automate software development workflows, including Continuous Integration and Continuous Delivery (CI/CD).\nWorkflow as code: Workflows are defined in YAML files, stored in the .github/workflows/ directory of the repository.\nEvent-driven workflows: Actions can be triggered by events like pushes, pull requests, issues, or scheduled events (cron jobs)."
  },
  {
    "objectID": "CI_CD/cicd.html#github-actions-1",
    "href": "CI_CD/cicd.html#github-actions-1",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nExtensive ecosystem: Provides a marketplace for reusable actions, enabling easy integration with third-party services or creating custom actions.\nScalable environments: Supports both GitHub-hosted and self-hosted runners for executing workflows across different platforms (Linux, macOS, Windows).\nParallel job execution: Allows running jobs in parallel or defining dependencies between jobs to optimize workflow efficiency."
  },
  {
    "objectID": "CI_CD/cicd.html#github-actions-2",
    "href": "CI_CD/cicd.html#github-actions-2",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nSecrets management: Securely stores sensitive information like API keys or credentials using GitHub Secrets, available within workflows.\nMatrix builds: Supports testing across multiple environments, versions, and configurations in parallel using matrix configurations.\nIntegrated with GitHub ecosystem: Deep integration with GitHub’s pull requests, issues, and code reviews, enabling a seamless development workflow."
  },
  {
    "objectID": "CI_CD/cicd.html#github-actions-3",
    "href": "CI_CD/cicd.html#github-actions-3",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nFree tier: Provides a generous free tier with included minutes for GitHub-hosted runners, with additional minutes available through paid plans.\nExtensive logging and monitoring: Offers detailed logs for each step in a workflow to help diagnose and troubleshoot errors."
  },
  {
    "objectID": "CI_CD/cicd.html#github-actions-4",
    "href": "CI_CD/cicd.html#github-actions-4",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nCustomizable triggers: Developers can create custom workflows that respond to nearly any GitHub event, such as commits, new issues, or pull requests.\nSupports container-based workflows: Allows developers to use Docker containers for isolated, consistent build environments."
  },
  {
    "objectID": "CI_CD/cicd.html#yml-files",
    "href": "CI_CD/cicd.html#yml-files",
    "title": "CI/CD",
    "section": "Yml files",
    "text": "Yml files\n\nHuman-readable format: YAML (YAML Ain’t Markup Language) is designed to be simple and easy to read, with a clean and minimal syntax.\nData serialization language: Commonly used for configuration files, it represents complex data structures such as lists, dictionaries, and scalars.\nIndentation-based structure: Uses whitespace indentation (usually spaces) to define structure and hierarchy, similar to Python."
  },
  {
    "objectID": "CI_CD/cicd.html#yml-files-1",
    "href": "CI_CD/cicd.html#yml-files-1",
    "title": "CI/CD",
    "section": "Yml Files",
    "text": "Yml Files\n\nSupports key-value pairs: YAML files store data in key-value pairs, making it intuitive for configuration purposes.\nSupports lists and arrays: Allows the creation of lists using dashes (-) for unordered sequences.\nNo special characters: Avoids the need for quotation marks, curly braces, or other delimiters common in other formats like JSON or XML."
  },
  {
    "objectID": "CI_CD/cicd.html#yml-files-2",
    "href": "CI_CD/cicd.html#yml-files-2",
    "title": "CI/CD",
    "section": "Yml Files",
    "text": "Yml Files\n\nWidely used in DevOps and CI/CD: Popular in tools like Docker Compose, GitHub Actions, Kubernetes, and Ansible for defining workflows and infrastructure.\nSupports anchors and aliases: Allows reusing values within the file using anchors (&) and aliases (*), which help reduce redundancy.\nPortable and flexible: Works well across different languages and platforms, and can be easily parsed by various programming languages."
  },
  {
    "objectID": "CI_CD/cicd.html#yml-files---structure",
    "href": "CI_CD/cicd.html#yml-files---structure",
    "title": "CI/CD",
    "section": "Yml Files - Structure",
    "text": "Yml Files - Structure\n\nKey-Value Pairs\n\nkey: value\nname: John\nage: 30\n\nIndentation (Hierarchy)\n\nperson:\n  name: John\n  age: 30"
  },
  {
    "objectID": "CI_CD/cicd.html#yml-files---structure-1",
    "href": "CI_CD/cicd.html#yml-files---structure-1",
    "title": "CI/CD",
    "section": "Yml Files - Structure",
    "text": "Yml Files - Structure\n\nLists (Sequences)\n\nfruits:\n  - apple\n  - banana\n  - orange\n\n\nIndentation (Hierarchy)\n\nperson:\n  name: John\n  age: 30"
  },
  {
    "objectID": "CI_CD/cicd.html#yml-files---structure-2",
    "href": "CI_CD/cicd.html#yml-files---structure-2",
    "title": "CI/CD",
    "section": "Yml Files - Structure",
    "text": "Yml Files - Structure\n\nNested Lists\n\nfruits:\n  - apple\n  - banana\n  - orange\n\nDictionaries (Mappings)\n\naddress:\n  street: 123 Main St\n  city: New York\n  zip: 10001"
  },
  {
    "objectID": "CI_CD/cicd.html#github-repo",
    "href": "CI_CD/cicd.html#github-repo",
    "title": "CI/CD",
    "section": "Github Repo",
    "text": "Github Repo\n\nAcess the github repo here\nFork the repo\nClone the repo to your local machine\nOpen using your prefferd text editor"
  },
  {
    "objectID": "CI_CD/ci_cd.html",
    "href": "CI_CD/ci_cd.html",
    "title": "CI/CD",
    "section": "",
    "text": "CI/CD stands for Continuous Integration (CI) and Continuous Delivery/Deployment (CD).\nIt is a key set of practices in modern software development.\nAutomates and streamlines the software delivery process."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd",
    "href": "CI_CD/ci_cd.html#cicd",
    "title": "CI/CD",
    "section": "",
    "text": "CI/CD stands for Continuous Integration (CI) and Continuous Delivery/Deployment (CD).\nIt is a key set of practices in modern software development.\nAutomates and streamlines the software delivery process."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd-1",
    "href": "CI_CD/ci_cd.html#cicd-1",
    "title": "CI/CD",
    "section": "CI/CD",
    "text": "CI/CD\n\nFocuses on improving software quality and efficiency.\nEnables teams to build, test, and release code frequently.\nReduces manual work and the potential for errors."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---continuous-integration-ci",
    "href": "CI_CD/ci_cd.html#cicd---continuous-integration-ci",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Integration (CI)",
    "text": "CI/CD - Continuous Integration (CI)\n\nFrequent code integration: Developers frequently merge code changes into a shared repository.\nAutomated testing: Every code commit triggers automated tests to detect bugs early.\nEarly bug detection: Small, incremental changes help identify and resolve issues faster."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---continuous-integration-ci-1",
    "href": "CI_CD/ci_cd.html#cicd---continuous-integration-ci-1",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Integration (CI)",
    "text": "CI/CD - Continuous Integration (CI)\n\nConsistent build environment: Ensures consistency between development, testing, and production environments.\nImproved code quality: Continuous feedback from tests leads to better code quality over time.\nFaster iteration cycles: Developers receive quick feedback, allowing faster iterations."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---continuous-delivery-cd",
    "href": "CI_CD/ci_cd.html#cicd---continuous-delivery-cd",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Delivery (CD)",
    "text": "CI/CD - Continuous Delivery (CD)\n\nAutomated release processes: After CI, code is automatically tested, validated, and prepared for deployment.\nFrequent, reliable releases: Ensures code can be released to production anytime with confidence.\nManual approval option: Allows for a final manual verification step before releasing to production."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---continuous-delivery-cd-1",
    "href": "CI_CD/ci_cd.html#cicd---continuous-delivery-cd-1",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Delivery (CD)",
    "text": "CI/CD - Continuous Delivery (CD)\n\nReduced release risk: Smaller, incremental updates lower the chances of major issues in production.\nQuick user feedback: Regular releases make it easier to gather user feedback and adjust features.\nFully automated deployments: Every change that passes automated tests is automatically deployed to production."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---continuous-delivery-cd-2",
    "href": "CI_CD/ci_cd.html#cicd---continuous-delivery-cd-2",
    "title": "CI/CD",
    "section": "CI/CD - Continuous Delivery (CD)",
    "text": "CI/CD - Continuous Delivery (CD)\n\nNo manual intervention: Removes manual approval steps, ensuring fast, frequent deployments.\nRapid iteration: New features, bug fixes, and updates are delivered to end users continuously.\nRequires strong testing: Robust automated tests are critical to ensure no bugs reach production.\nHigh-quality monitoring: Real-time monitoring systems are essential to detect and respond to any production issues."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---benefits",
    "href": "CI_CD/ci_cd.html#cicd---benefits",
    "title": "CI/CD",
    "section": "CI/CD - Benefits",
    "text": "CI/CD - Benefits\n\nFaster development cycles: Continuous integration and deployment reduce the time between coding and deployment.\nHigher quality software: Continuous testing, feedback loops, and automated checks ensure higher reliability.\nReduced manual effort: Automation reduces manual testing, builds, and deployments, improving productivity."
  },
  {
    "objectID": "CI_CD/ci_cd.html#cicd---benefits-1",
    "href": "CI_CD/ci_cd.html#cicd---benefits-1",
    "title": "CI/CD",
    "section": "CI/CD - Benefits",
    "text": "CI/CD - Benefits\n\nGreater collaboration: Developers, testers, and operations teams work in sync, fostering a DevOps culture.\nBetter user experience: Faster delivery of features and fixes leads to improved customer satisfaction."
  },
  {
    "objectID": "CI_CD/ci_cd.html#github-actions",
    "href": "CI_CD/ci_cd.html#github-actions",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nCI/CD automation platform: GitHub Actions allows developers to automate software development workflows, including Continuous Integration and Continuous Delivery (CI/CD).\nWorkflow as code: Workflows are defined in YAML files, stored in the .github/workflows/ directory of the repository.\nEvent-driven workflows: Actions can be triggered by events like pushes, pull requests, issues, or scheduled events (cron jobs)."
  },
  {
    "objectID": "CI_CD/ci_cd.html#github-actions-1",
    "href": "CI_CD/ci_cd.html#github-actions-1",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nExtensive ecosystem: Provides a marketplace for reusable actions, enabling easy integration with third-party services or creating custom actions.\nScalable environments: Supports both GitHub-hosted and self-hosted runners for executing workflows across different platforms (Linux, macOS, Windows).\nParallel job execution: Allows running jobs in parallel or defining dependencies between jobs to optimize workflow efficiency."
  },
  {
    "objectID": "CI_CD/ci_cd.html#github-actions-2",
    "href": "CI_CD/ci_cd.html#github-actions-2",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nSecrets management: Securely stores sensitive information like API keys or credentials using GitHub Secrets, available within workflows.\nMatrix builds: Supports testing across multiple environments, versions, and configurations in parallel using matrix configurations.\nIntegrated with GitHub ecosystem: Deep integration with GitHub’s pull requests, issues, and code reviews, enabling a seamless development workflow."
  },
  {
    "objectID": "CI_CD/ci_cd.html#github-actions-3",
    "href": "CI_CD/ci_cd.html#github-actions-3",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nFree tier: Provides a generous free tier with included minutes for GitHub-hosted runners, with additional minutes available through paid plans.\nExtensive logging and monitoring: Offers detailed logs for each step in a workflow to help diagnose and troubleshoot errors."
  },
  {
    "objectID": "CI_CD/ci_cd.html#github-actions-4",
    "href": "CI_CD/ci_cd.html#github-actions-4",
    "title": "CI/CD",
    "section": "Github Actions",
    "text": "Github Actions\n\nCustomizable triggers: Developers can create custom workflows that respond to nearly any GitHub event, such as commits, new issues, or pull requests.\nSupports container-based workflows: Allows developers to use Docker containers for isolated, consistent build environments."
  },
  {
    "objectID": "CI_CD/ci_cd.html#yml-files",
    "href": "CI_CD/ci_cd.html#yml-files",
    "title": "CI/CD",
    "section": "Yml files",
    "text": "Yml files\n\nHuman-readable format: YAML (YAML Ain’t Markup Language) is designed to be simple and easy to read, with a clean and minimal syntax.\nData serialization language: Commonly used for configuration files, it represents complex data structures such as lists, dictionaries, and scalars.\nIndentation-based structure: Uses whitespace indentation (usually spaces) to define structure and hierarchy, similar to Python."
  },
  {
    "objectID": "CI_CD/ci_cd.html#yml-files-1",
    "href": "CI_CD/ci_cd.html#yml-files-1",
    "title": "CI/CD",
    "section": "Yml Files",
    "text": "Yml Files\n\nSupports key-value pairs: YAML files store data in key-value pairs, making it intuitive for configuration purposes.\nSupports lists and arrays: Allows the creation of lists using dashes (-) for unordered sequences.\nNo special characters: Avoids the need for quotation marks, curly braces, or other delimiters common in other formats like JSON or XML."
  },
  {
    "objectID": "CI_CD/ci_cd.html#yml-files-2",
    "href": "CI_CD/ci_cd.html#yml-files-2",
    "title": "CI/CD",
    "section": "Yml Files",
    "text": "Yml Files\n\nWidely used in DevOps and CI/CD: Popular in tools like Docker Compose, GitHub Actions, Kubernetes, and Ansible for defining workflows and infrastructure.\nSupports anchors and aliases: Allows reusing values within the file using anchors (&) and aliases (*), which help reduce redundancy.\nPortable and flexible: Works well across different languages and platforms, and can be easily parsed by various programming languages."
  },
  {
    "objectID": "CI_CD/ci_cd.html#yml-files---structure",
    "href": "CI_CD/ci_cd.html#yml-files---structure",
    "title": "CI/CD",
    "section": "Yml Files - Structure",
    "text": "Yml Files - Structure\n\nKey-Value Pairs\n\nkey: value\nname: John\nage: 30\n\nIndentation (Hierarchy)\n\nperson:\n  name: John\n  age: 30"
  },
  {
    "objectID": "CI_CD/ci_cd.html#yml-files---structure-1",
    "href": "CI_CD/ci_cd.html#yml-files---structure-1",
    "title": "CI/CD",
    "section": "Yml Files - Structure",
    "text": "Yml Files - Structure\n\nLists (Sequences)\n\nfruits:\n  - apple\n  - banana\n  - orange\n\n\nIndentation (Hierarchy)\n\nperson:\n  name: John\n  age: 30"
  },
  {
    "objectID": "CI_CD/ci_cd.html#yml-files---structure-2",
    "href": "CI_CD/ci_cd.html#yml-files---structure-2",
    "title": "CI/CD",
    "section": "Yml Files - Structure",
    "text": "Yml Files - Structure\n\nNested Lists\n\nfruits:\n  - apple\n  - banana\n  - orange\n\nDictionaries (Mappings)\n\naddress:\n  street: 123 Main St\n  city: New York\n  zip: 10001"
  },
  {
    "objectID": "CI_CD/ci_cd.html#github-repo",
    "href": "CI_CD/ci_cd.html#github-repo",
    "title": "CI/CD",
    "section": "Github Repo",
    "text": "Github Repo\n\nAcess the github repo here\nFork the repo\nClone the repo to your local machine\nOpen using your prefferd text editor"
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "Python",
    "section": "",
    "text": "Python Programing Language\n\nSpecial Methods (magic methods)\nPython magic methods, also known as dunder (double underscore) methods, are special methods that allow objects to interact with Python’s built-in operations in a more intuitive and customized way. These methods are surrounded by double underscores (e.g., ‘init’, ‘str’, ‘add’). Magic methods enable customization of object behaviors, such as defining how objects are initialized, represented as strings, compared, or involved in mathematical operations. For example, ‘init’ is used for initializing objects, while ‘add’ allows custom behavior when the + operator is used. By overriding these methods, you can make\nobjects behave like native data types.\nSlides here\n\n\nList comprehension and generator expressions\nList comprehensions and generator expressions are concise ways to create lists or generators in Python by using a more readable and compact syntax. A list comprehension produces a new list by iterating over an iterable, optionally filtering elements, and applying an expression to each item in a single line (e.g., [x**2 for x in range(5)] creates a list of squares). Generator expressions are similar, but instead of creating a list, they yield items one by one, using parentheses instead of brackets. This makes them more memory-efficient, especially for large datasets, as they generate values on demand rather than storing them all at once.\n\n\nTuples as Records\nTuples can be used as records in programming to store related pieces of data that represent a single entity or entry, like a row in a database. Each element in the tuple corresponds to a specific attribute of the entity, and the order of elements is fixed, giving structure to the data. For example, a tuple (name, age, city) could represent a person’s record with fields for their name, age, and city. Though tuples lack field names like dictionaries or classes, they provide a lightweight and efficient way to group related data in a consistent format.\n\n\nTuple Unpacking\nUnpacking tuples in Python allows you to assign the values of a tuple to multiple variables in a single, concise operation. This process breaks the tuple into individual components, which are then assigned to corresponding variables based on their position. For example, if you have a tuple person = (\"Alice\", 30, \"Engineer\"), you can unpack it with name, age, profession = person, which assigns \"Alice\" to name, 30 to age, and \"Engineer\" to profession. This makes code cleaner and more readable, especially when working with multiple values at once.\n\n\nFirst-class functions\nIn Python, functions are treated as first-class citizens, meaning they can be assigned to variables, passed as arguments to other functions, returned from functions, and stored in data structures like lists or dictionaries. This flexibility allows for powerful programming patterns such as higher-order functions, where functions can accept other functions as inputs or return them as outputs. For example, you can pass a function like len to map() or assign a custom function to a variable for later use, making Python’s functions highly versatile and expressive.\nSlides here\n\n\nDecorators and Closures\nDecorators and closures are closely related concepts in Python that enhance function behavior. A decorator is a higher-order function that takes another function as input and extends or modifies its functionality without changing its code. It’s often used for tasks like logging, authentication, or timing. A closure occurs when an inner function captures variables from its enclosing scope, allowing those variables to be retained even after the outer function has finished executing. Decorators often rely on closures to wrap and extend the behavior of functions by preserving context and state across executions.\nSlides here\n\n\nVectorization\nCode vectorization in Python refers to the process of optimizing operations by applying them to entire arrays or matrices simultaneously, rather than using explicit loops. This is typically done using libraries like NumPy, which allow element-wise operations on large datasets to be executed in a single, efficient step. Vectorization speeds up computations significantly by leveraging low-level, highly optimized C or Fortran routines, reducing the overhead associated with Python loops and enabling parallel processing where possible. This makes code cleaner, faster, and more memory efficient.\nSlides here"
  },
  {
    "objectID": "software_engineering.html",
    "href": "software_engineering.html",
    "title": "Software Engineering Best Practices",
    "section": "",
    "text": "Clean Code\nClean Code refers to a programming philosophy that emphasizes writing code that is easy to read, maintain, and understand. It promotes practices like meaningful naming conventions, modular design, simple logic, and minimizing code duplication. Clean code aims to be self-explanatory, reducing the need for excessive comments and making it easier for others (or your future self) to debug, test, and extend. Following clean code principles leads to higher-quality software, improved collaboration, and lower technical debt, making it easier to adapt and maintain the codebase over time.\nSlides here\n\n\nCI/CD\nCI/CD (Continuous Integration and Continuous Deployment/Delivery) is a development practice that automates the process of integrating code changes, testing, and deploying applications. In CI, developers frequently merge their code into a shared repository where automated tests are run to detect errors early. CD extends this by automating the deployment process, either by continuously delivering updates to a staging environment (Continuous Delivery) or automatically deploying to production (Continuous Deployment). This approach enhances software quality, speeds up development cycles, and allows teams to deliver features more reliably and efficiently.\nSlides here\n\n\nMachine Learning Design Patterns\nMachine learning design patterns are proven, reusable solutions to common challenges that arise in the development, deployment, and maintenance of machine learning (ML) systems. These patterns offer structured guidance on handling issues like data preprocessing, feature engineering, model selection, and operational scalability, helping streamline the often complex and iterative ML workflow. Examples include patterns like “Feature Store,” which centralizes reusable features across models, “Ensemble,” which combines multiple models to improve predictive performance, and “Model Monitoring,” which enables ongoing model evaluation to detect issues such as data drift. By encapsulating best practices, ML design patterns support efficient development, ensure robustness, and reduce technical debt, making them valuable tools for practitioners at all levels.\nSlides here"
  }
]